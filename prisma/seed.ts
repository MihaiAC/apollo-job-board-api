// Seed file generated by Claude, from schema.prisma.

import { PrismaClient, Role } from "./generated";
import * as bcrypt from "bcrypt";

const prisma = new PrismaClient();

async function hashPassword(password: string): Promise<string> {
  const saltRounds = 10;
  return bcrypt.hash(password, saltRounds);
}

async function main() {
  await prisma.$transaction(async (tx) => {
    // Clean existing data (if needed)
    await tx.application.deleteMany();
    await tx.job.deleteMany();
    await tx.employer.deleteMany();
    await tx.user.deleteMany();

    console.log("Database cleaned");

    // Create admin user
    const adminUser = await tx.user.create({
      data: {
        username: "admin",
        email: "admin@example.com",
        passwordHash: await hashPassword("admin123"),
        role: Role.ADMIN,
      },
    });
    console.log("Admin user created:", adminUser);

    // Create manager users
    const manager1 = await tx.user.create({
      data: {
        username: "manager1",
        email: "manager1@example.com",
        passwordHash: await hashPassword("manager123"),
        role: Role.MANAGER,
      },
    });
    console.log("Manager 1 created:", manager1);

    const manager2 = await tx.user.create({
      data: {
        username: "manager2",
        email: "manager2@example.com",
        passwordHash: await hashPassword("manager123"),
        role: Role.MANAGER,
      },
    });
    console.log("Manager 2 created:", manager2);

    // Create candidate users
    const candidate1 = await tx.user.create({
      data: {
        username: "candidate1",
        email: "candidate1@example.com",
        passwordHash: await hashPassword("candidate123"),
        cvUrl: "https://storage.example.com/cvs/candidate1.pdf",
        role: Role.CANDIDATE,
      },
    });
    console.log("Candidate 1 created:", candidate1);

    const candidate2 = await tx.user.create({
      data: {
        username: "candidate2",
        email: "candidate2@example.com",
        passwordHash: await hashPassword("candidate123"),
        cvUrl: "https://storage.example.com/cvs/candidate2.pdf",
        role: Role.CANDIDATE,
      },
    });
    console.log("Candidate 2 created:", candidate2);

    // Create employers with their managers
    const employer1 = await tx.employer.create({
      data: {
        name: "Tech Solutions Inc.",
        contactEmail: "hr@techsolutions.com",
        industry: "Technology",
        managerId: manager1.id,
      },
    });
    console.log("Employer 1 created:", employer1);

    const employer2 = await tx.employer.create({
      data: {
        name: "Green Energy Ltd.",
        contactEmail: "careers@greenenergy.com",
        industry: "Renewable Energy",
        managerId: manager2.id,
      },
    });
    console.log("Employer 2 created:", employer2);

    // Create jobs for employer 1
    const job1Employer1 = await tx.job.create({
      data: {
        title: "Full Stack Developer",
        description:
          "Experienced developer with knowledge of React and Node.js",
        employerId: employer1.id,
      },
    });
    console.log("Job 1 for Employer 1 created:", job1Employer1);

    const job2Employer1 = await tx.job.create({
      data: {
        title: "UX Designer",
        description:
          "Design intuitive user interfaces for web and mobile applications",
        employerId: employer1.id,
      },
    });
    console.log("Job 2 for Employer 1 created:", job2Employer1);

    // Create jobs for employer 2
    const job1Employer2 = await tx.job.create({
      data: {
        title: "Solar Panel Technician",
        description:
          "Install and maintain solar panel systems for residential clients",
        employerId: employer2.id,
      },
    });
    console.log("Job 1 for Employer 2 created:", job1Employer2);

    const job2Employer2 = await tx.job.create({
      data: {
        title: "Environmental Engineer",
        description:
          "Develop solutions for environmental challenges and sustainability",
        employerId: employer2.id,
      },
    });
    console.log("Job 2 for Employer 2 created:", job2Employer2);

    // Create applications for candidate 1
    const app1Candidate1 = await tx.application.create({
      data: {
        userId: candidate1.id,
        jobId: job1Employer1.id,
      },
    });
    console.log("Application 1 for Candidate 1 created:", app1Candidate1);

    const app2Candidate1 = await tx.application.create({
      data: {
        userId: candidate1.id,
        jobId: job1Employer2.id,
      },
    });
    console.log("Application 2 for Candidate 1 created:", app2Candidate1);

    // Create applications for candidate 2
    const app1Candidate2 = await tx.application.create({
      data: {
        userId: candidate2.id,
        jobId: job2Employer1.id,
      },
    });
    console.log("Application 1 for Candidate 2 created:", app1Candidate2);

    const app2Candidate2 = await tx.application.create({
      data: {
        userId: candidate2.id,
        jobId: job2Employer2.id,
      },
    });
    console.log("Application 2 for Candidate 2 created:", app2Candidate2);
  });
}

main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
